/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xuartlite_l.h"
//#include "xgpio.h"
//#include "xil_io.h"
#include "mb_interface.h"

#define LEDS_BASEADDR XPAR_LEDS_8BITS_BASEADDR
#define SW_BASEADDR XPAR_DIP_SWITCHES_8BITS_BASEADDR
#define BTN_BASEADDR XPAR_PUSH_BUTTONS_4BITS_BASEADDR

void print(char *str);

int main()
{
    init_platform();

    xil_printf("%s\n\r", "Started!");

    while (1) {
    	xil_printf("%s\n\r", "Enter hash: ");
		char recv = XUartLite_RecvByte(STDIN_BASEADDRESS); // read first char
		unsigned num = 0;

		/* Read password hash */
		char buff[32];
		int i_buff = 0;
		while (recv != '\n') {
			buff[i_buff++] = recv;
			recv = XUartLite_RecvByte(STDIN_BASEADDRESS);
		}

		for ()
		switch (recv) {
					case '0':
						num = 0;
						break;
					case '1':
						num = 1;
						break;
					case '2':
						num = 2;
						break;
					case '3':
						num = 3;
						break;
					case '4':
						num = 4;
						break;
					case '5':
						num = 5;
						break;
					case '6':
						num = 6;
						break;
					case '7':
						num = 7;
						break;
					case '8':
						num = 8;
						break;
					case '9':
						num = 9;
						break;
					case 'a':
					case 'A':
						num = 10;
						break;
					case 'b':
					case 'B':
						num = 11;
						break;
					case 'c':
					case 'C':
						num = 12;
						break;
					case 'd':
					case 'D':
						num = 13;
						break;
					case 'e':
					case 'E':
						num = 14;
						break;
					case 'f':
					case 'F':
						num = 15;
						break;
					}



		putfsl(0x5ff832d9, 0);
		putfsl(0xbca8241d, 0);
		putfsl(0x65327975, 0);
		putfsl(0x6f3ccd11, 0);
		xil_printf("Hashing\n\r");

		unsigned int resp;
		char *str = &resp; // c-magic

		getfsl(resp, 0);
		unsigned i;
		xil_printf("password: ");
		for (i = 0; i < 4; i++) {
			xil_printf("%c", *(str+i));
		}
		xil_printf("\n\r");
		break;
    }
    cleanup_platform();

    return 0;
}
